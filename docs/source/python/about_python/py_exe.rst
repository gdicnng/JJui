==========================================
关于中转器 py.exe pyw.exe
==========================================

　　其实如果你仅打算安装 python 来运行 JJui ，正常安装 python，安装 Pillow 库后，能运行 JJui 了，没有问题的话，完全不用管这么多。

　　当你用 py.exe 打开一个脚本，它会中转一下，转到 python.exe ，用 python.exe 打开它。

　　当你用 pyw.exe 打开一个脚本，它会中转一下，转到 pythonw.exe ，用 pythonw.exe 打开它。

　　这不是多此一举，自找麻烦吗？
如果你只安装了一个版本的 python ，好像确实有点多余。
如果你安装了多个版本的 python ，它方便你用来切换不同版本。


命令行中 手动临时指定版本
====================================
　　比如，你安装了 python 3.6 版，还安装了 3.7 版，还安装了 3.8 版。

　　在命令行中，你输入指令 py -3.6 其它指令 ，就相当于调用了 3.6 版本的 python.exe + 指令。
::

	py 其它指令
	py -3.6 其它指令
	py -3.7 其它指令
	py -3.8 其它指令
	这样方便切换多个版本
	对于图形窗口程序，可以用 pyw ，相当于 pythonw.exe + 指令

　　如果同时安装了 python 3.6 的 32位版本 和 64位版本。

::

	py -3.6-32 其它指令
	py -3.6-64 其它指令

整体默认版本
==================
　　py.exe pyw.exe 的默认版本，应该是你安装的最新的那一个版本的 python 。

　　如果想将默认版本改一下，每次鼠标双击 ``*.py 、*.pyw`` 文件的时候，都用另一个版本的 python 。

　　你可以在 py.exe 相同的文件夹里，建一个 py.ini 文本格式的文件，内容写上 


::

	[defaults]
	python=3.6

　　这样，它就默认是 3.6 版本。


单个文件默认版本
===========================

　　如果只是某一个脚本，需要使用 指定 版本的 python 。

　　比如，兼容性问题，一个脚本写出来，当时它用的那个版本的 python 肯定要好一些，之前或之后的不同版本 python 运行脚本也许不兼容了，可能需要指定 python 的版本。

　　在 windows 操作系统上的话：

　　比如有个 .py 或 .pyw 脚本，你只要在它的的第一行，写上 


::

	#!python3.7

　　那么，鼠标双击打开这个脚本时，中转器 就会 转到 python 3.7 版本。

